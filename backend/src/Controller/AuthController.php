<?php

namespace Fileknight\Controller;

use Doctrine\ORM\EntityManagerInterface;
use Fileknight\Controller\Traits\UserEntityGetterTrait;
use Fileknight\DTO\RefreshTokenDTO;
use Fileknight\DTO\UserDTO;
use Fileknight\Entity\RefreshToken;
use Fileknight\Exception\ApiException;
use Fileknight\Exception\ForbiddenException;
use Fileknight\Response\ApiResponse;
use Fileknight\Response\JWTResponse;
use Fileknight\Service\JWT\JsonWebTokenService;
use Fileknight\Service\Resolver\Request\RequestResolverService;
use Fileknight\Service\User\UserService;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

#[Route('/api/auth')]
class AuthController extends AbstractController
{
    use UserEntityGetterTrait;

    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        private readonly UserService            $userService,
        private readonly RequestResolverService $requestResolverService,
        private readonly JsonWebTokenService    $jwtService,
    )
    {
    }

    /**
     * Register new user. This is used for finishing the registration process.
     * The user entity is created by the server's admin, this api just sets
     * finished registration (sets the password) using the received token
     *
     * ```
     * POST /api/auth/register
     * {
     *      username: (required) User's unique username
     *      password: (required) User's password
     *      token:    (required) Token used for registration. Received from server admin
     * }
     * ```
     * @throws ApiException
     */
    #[Route(path: '/register', name: 'auth.register', methods: ['POST'])]
    public function register(Request $request): JsonResponse
    {
        $data = $this->requestResolverService->resolve($request, ['username', 'token', 'password']);

        $user = $this->userService->getUser($data->get('username'));
        $this->userService->register($user, $data->get('password'), $data->get('token'));

        return ApiResponse::success(
            UserDTO::fromEntity($user)->toArray(),
            'User successfully registered.',
            Response::HTTP_CREATED
        );
    }

    /**
     * Refresh the JWT. Returns a new JWT and a new refresh token
     *
     * ```
     * POST /api/auth/refresh
     * {
     *      refresh_token: (required) The refresh token
     * }
     * ```
     * @throws ApiException
     */
    #[Route(path: '/refresh', name: 'auth.refresh', methods: ['POST'])]
    public function refresh(Request $request): JsonResponse
    {
        $data = $this->requestResolverService->resolve($request, ['refresh_token']);
        $refreshToken = $data->get('refresh_token');

        // Use the refresh token to get a new jwt and a new refresh token
        /** @var string $jwt */
        /** @var RefreshToken $newRefreshToken */
        [$jwt, $newRefreshToken] = $this->jwtService->refresh($refreshToken);

        $payload = JsonWebTokenService::decode($jwt);

        return JWTResponse::json($jwt, $payload['iat'], $payload['exp'], $newRefreshToken->getToken());
    }

    /**
     * Request a password reset. Passwords reset are handled by the admin,
     * this endpoint just sends the request, the new reset token will be
     * generated by the admin and sent to the user.
     *
     * After receiving the reset token, use the same register endpoint to set the new password.
     *
     * ```
     *  POST /api/auth/{userId}/reset
     * ```
     * @throws ApiException
     */
    #[Route(path: '/{userId}/reset', name: 'auth.reset', methods: ['POST'])]
    public function reset(Request $request, string $userId): JsonResponse
    {
        $user = $this->userService->getUserById($userId);
        $this->userService->requestReset($user);

        return ApiResponse::success([], 'Password reset request sent. You will be contacted by the admin.');
    }

    /**
     * Change user password
     *
     * ```
     *  PATCH /api/auth/{userId}/edit/password
     *  {
     *       oldPassword: (required) User's old password
     *       newPassword: (required) User's new password
     *  }
     *  ```
     * @throws ApiException
     */
    #[Route(path: '/{userId}/edit/password', name: 'auth.edit.password', methods: ['PATCH'])]
    public function changePassword(Request $request, string $userId): JsonResponse
    {
        $user = $this->getUserEntity();
        $data = $this->requestResolverService->resolve($request, ['oldPassword', 'newPassword']);

        if ($userId !== $user->getId()) {
            throw new ForbiddenException("Password edit forbidden for user $userId.");
        }

        $this->userService->changePassword($user, $data->get('oldPassword'), $data->get('newPassword'));

        return ApiResponse::success(
            UserDTO::fromEntity($user)->toArray(),
            'Password successfully changed.',
            Response::HTTP_CREATED
        );
    }

    /**
     * Logout from current device
     *
     * ```
     * POST /api/auth/logout
     * Headers: Fk-Device-Id
     * ```
     * Required headers are enforced by the {@see ApiRequestSubscriber}
     */
    #[Route(path: '/logout', name: 'auth.logout', methods: ['POST'])]
    public function logout(Request $request): JsonResponse
    {
        $deviceId = $request->headers->get('Fk-Device-Id');
        $user = $this->getUserEntity();

        // Logout from device by invalidating all refresh tokens for that device
        $this->jwtService->invalidateAllRefreshTokensForDevice($user, $deviceId);

        return ApiResponse::success([], "User successfully logged out from device: $deviceId.");
    }

    /**
     * Logout from all devices
     *
     * ```
     * POST /api/auth/logout/all
     * ```
     */
    #[Route(path: '/logout/all', name: 'auth.logout.all', methods: ['POST'])]
    public function logoutAll(Request $request): JsonResponse
    {
        $user = $this->getUserEntity();

        // Logout from device by invalidating all refresh tokens for that device
        $this->jwtService->invalidateAllRefreshTokens($user);

        return ApiResponse::success([], "User successfully logged out from all devices.");
    }

    /**
     * Get a list of all active sessions
     *
     * ```
     * GET /api/auth/sessions
     * ```
     */
    #[Route(path: '/sessions', name: 'auth.sessions', methods: ['GET'])]
    public function sessions(Request $request): JsonResponse
    {
        $user = $this->getUserEntity();

        $refreshTokens = $this->jwtService->getActiveTokensForUser($user);
        // Map the array of refresh tokens to an array of corresponding DTOs
        $data = array_map(fn($token) => RefreshTokenDTO::fromEntity($token)->toArray(), $refreshTokens);

        return ApiResponse::success($data, 'Active sessions fetched.');
    }
}
